/*
 * generated by Xtext 2.23.0
 */
grammar InternalToy;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.unice.polytech.si5.toylanguage.concretesyntax.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.unice.polytech.si5.toylanguage.concretesyntax.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.unice.polytech.si5.toylanguage.concretesyntax.services.ToyGrammarAccess;

}

@parser::members {

 	private ToyGrammarAccess grammarAccess;

    public InternalToyParser(TokenStream input, ToyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ToyProgram";
   	}

   	@Override
   	protected ToyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleToyProgram
entryRuleToyProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToyProgramRule()); }
	iv_ruleToyProgram=ruleToyProgram
	{ $current=$iv_ruleToyProgram.current; }
	EOF;

// Rule ToyProgram
ruleToyProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getToyProgramAccess().getToyProgramAction_0(),
					$current);
			}
		)
		otherlv_1='program'
		{
			newLeafNode(otherlv_1, grammarAccess.getToyProgramAccess().getProgramKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getToyProgramAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToyProgramRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getToyProgramAccess().getOwnedVariablesVariableParserRuleCall_3_0());
				}
				lv_ownedVariables_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToyProgramRule());
					}
					add(
						$current,
						"ownedVariables",
						lv_ownedVariables_3_0,
						"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getToyProgramAccess().getOwnedStatementsStatementParserRuleCall_4_0());
				}
				lv_ownedStatements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToyProgramRule());
					}
					add(
						$current,
						"ownedStatements",
						lv_ownedStatements_4_0,
						"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOperationParserRuleCall_0());
		}
		this_Operation_0=ruleOperation
		{
			$current = $this_Operation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1());
		}
		this_Assignment_1=ruleAssignment
		{
			$current = $this_Assignment_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getParallelAssignmentParserRuleCall_2());
		}
		this_ParallelAssignment_2=ruleParallelAssignment
		{
			$current = $this_ParallelAssignment_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getSoustractionParserRuleCall_1());
		}
		this_Soustraction_1=ruleSoustraction
		{
			$current = $this_Soustraction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		otherlv_1='Var'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getVarKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getTypeVarTypeEnumRuleCall_4_0());
				}
				lv_type_4_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='='
		{
			newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getEqualsSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getInitialValueEDoubleParserRuleCall_6_0());
				}
				lv_initialValue_6_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"initialValue",
						lv_initialValue_6_0,
						"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getVariableAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getAdditionAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAdditionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getAdditionAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
			}
		)?
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAdditionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getLeftVariableVariableCrossReference_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='+'
		{
			newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getPlusSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAdditionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getRightVariableVariableCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAdditionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSoustraction
entryRuleSoustraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoustractionRule()); }
	iv_ruleSoustraction=ruleSoustraction
	{ $current=$iv_ruleSoustraction.current; }
	EOF;

// Rule Soustraction
ruleSoustraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getSoustractionAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSoustractionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getSoustractionAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
			}
		)?
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSoustractionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoustractionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSoustractionAccess().getLeftVariableVariableCrossReference_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='-'
		{
			newLeafNode(otherlv_4, grammarAccess.getSoustractionAccess().getHyphenMinusKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoustractionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSoustractionAccess().getRightVariableVariableCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getSoustractionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
			}
		)?
		(
			(
				otherlv_2='Assign'
				{
					newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getAssignKeyword_1_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssignmentRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_1_0_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='with'
				{
					newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getWithKeyword_1_0_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getOperationOperationParserRuleCall_1_0_3_0());
						}
						lv_operation_5_0=ruleOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"operation",
								lv_operation_5_0,
								"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.Operation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssignmentRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_1_1_0_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=':='
				{
					newLeafNode(otherlv_7, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getOperationOperationParserRuleCall_1_1_2_0());
						}
						lv_operation_8_0=ruleOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"operation",
								lv_operation_8_0,
								"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.Operation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleParallelAssignment
entryRuleParallelAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParallelAssignmentRule()); }
	iv_ruleParallelAssignment=ruleParallelAssignment
	{ $current=$iv_ruleParallelAssignment.current; }
	EOF;

// Rule ParallelAssignment
ruleParallelAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getParallelAssignmentAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParallelAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='->'
			{
				newLeafNode(otherlv_1, grammarAccess.getParallelAssignmentAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
			}
		)?
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getParallelAssignmentAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParallelAssignmentAccess().getOwnedAssignmentsAssignmentParserRuleCall_1_1_0());
					}
					lv_ownedAssignments_3_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParallelAssignmentRule());
						}
						add(
							$current,
							"ownedAssignments",
							lv_ownedAssignments_3_0,
							"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4='|'
				{
					newLeafNode(otherlv_4, grammarAccess.getParallelAssignmentAccess().getVerticalLineKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParallelAssignmentAccess().getOwnedAssignmentsAssignmentParserRuleCall_1_2_1_0());
						}
						lv_ownedAssignments_5_0=ruleAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParallelAssignmentRule());
							}
							add(
								$current,
								"ownedAssignments",
								lv_ownedAssignments_5_0,
								"fr.unice.polytech.si5.toylanguage.concretesyntax.Toy.Assignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getParallelAssignmentAccess().getRightSquareBracketKeyword_1_3());
			}
		)
	)
;

// Rule VarType
ruleVarType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getVarTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVarTypeAccess().getIntEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='double'
			{
				$current = grammarAccess.getVarTypeAccess().getDoubleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVarTypeAccess().getDoubleEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
